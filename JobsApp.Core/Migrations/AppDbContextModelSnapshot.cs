// <auto-generated />
using System;
using JobsApp.Core.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JobsApp.Core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JobsApp.Core.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Development"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Management"
                        });
                });

            modelBuilder.Entity("JobsApp.Core.Models.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Benivo"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PCS AM"
                        });
                });

            modelBuilder.Entity("JobsApp.Core.Models.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Bookmarked")
                        .HasColumnType("bit");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LocationId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bookmarked = false,
                            CategoryId = 1,
                            CompanyId = 1,
                            Description = "Seeking of .Net Developer",
                            LocationId = 1,
                            PostedDate = new DateTime(2020, 10, 3, 9, 45, 1, 945, DateTimeKind.Local).AddTicks(784),
                            Title = "Software Developer",
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            Bookmarked = false,
                            CategoryId = 1,
                            CompanyId = 1,
                            Description = "Seeking of Senior Developer",
                            LocationId = 1,
                            PostedDate = new DateTime(2020, 9, 29, 9, 45, 1, 947, DateTimeKind.Local).AddTicks(5892),
                            Salary = 200000m,
                            Title = "Senior Software Developer",
                            Type = 2
                        },
                        new
                        {
                            Id = 3,
                            Bookmarked = false,
                            CategoryId = 1,
                            CompanyId = 1,
                            Description = "Seeking of Senior React Developer",
                            LocationId = 1,
                            PostedDate = new DateTime(2020, 9, 26, 9, 45, 1, 947, DateTimeKind.Local).AddTicks(7150),
                            Title = "Senior React Developer",
                            Type = 4
                        },
                        new
                        {
                            Id = 4,
                            Bookmarked = true,
                            CategoryId = 1,
                            CompanyId = 2,
                            Description = "Seeking of .Net Developer",
                            LocationId = 1,
                            PostedDate = new DateTime(2020, 9, 27, 9, 45, 1, 947, DateTimeKind.Local).AddTicks(7171),
                            Salary = 100000m,
                            Title = ".Net Developer",
                            Type = 0
                        },
                        new
                        {
                            Id = 5,
                            Bookmarked = false,
                            CategoryId = 2,
                            CompanyId = 2,
                            Description = "Seeking of CTO",
                            LocationId = 1,
                            PostedDate = new DateTime(2020, 10, 1, 9, 45, 1, 947, DateTimeKind.Local).AddTicks(7195),
                            Title = "CTO",
                            Type = 3
                        },
                        new
                        {
                            Id = 6,
                            Bookmarked = false,
                            CategoryId = 2,
                            CompanyId = 2,
                            Description = "Seeking of Project Manager",
                            LocationId = 1,
                            PostedDate = new DateTime(2020, 10, 1, 9, 45, 1, 947, DateTimeKind.Local).AddTicks(7216),
                            Title = "Project Manager",
                            Type = 1
                        });
                });

            modelBuilder.Entity("JobsApp.Core.Models.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Armenia, Yerevan"
                        });
                });

            modelBuilder.Entity("JobsApp.Core.Models.Entities.Job", b =>
                {
                    b.HasOne("JobsApp.Core.Models.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobsApp.Core.Models.Entities.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobsApp.Core.Models.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
